@PACKAGE_INIT@

if(@MAX_CMAKE_USER_SCRIPT_PRESENT@)
	include("${CMAKE_CURRENT_LIST_DIR}/@MAX_CMAKE_USER_SCRIPT_INSTALL_NAME@")
endif()
include("${CMAKE_CURRENT_LIST_DIR}/@TARGETS_EXPORT_NAME@.cmake")
get_target_property(MAX_INCLUDE_PATH max::max INTERFACE_INCLUDE_DIRECTORIES)
list(GET MAX_INCLUDE_PATH 0 MAX_INCLUDE_PATH_1) # max::max exports include directory twice?
set(MAX_SHADER_INCLUDE_PATH ${MAX_INCLUDE_PATH_1}/max)

# If cross compiling, we need a host-compatible version of shaderc to compile shaders
macro(_max_crosscompile_use_host_tool TOOL_NAME)
	if(NOT TARGET max::${TOOL_NAME})
		find_program(
			${TOOL_NAME}_EXECUTABLE
			NAMES max-${TOOL_NAME} ${TOOL_NAME}
			PATHS @MAX_ADDITIONAL_TOOL_PATHS@ /usr/bin
		)
		add_executable(max::${TOOL_NAME} IMPORTED)
		set_target_properties(max::${TOOL_NAME} PROPERTIES IMPORTED_LOCATION "${${TOOL_NAME}_EXECUTABLE}")
	endif()
endmacro()

_max_crosscompile_use_host_tool(bin2c)
_max_crosscompile_use_host_tool(texturec)
_max_crosscompile_use_host_tool(shaderc)
_max_crosscompile_use_host_tool(texturev)
_max_crosscompile_use_host_tool(geometryv)

include("${CMAKE_CURRENT_LIST_DIR}/maxToolUtils.cmake")
check_required_components("@PROJECT_NAME@")
